# MediaPipe graph that performs multiple detection tasks with TensorFlow Lite.
# Used in the examples in
# mediapipe/examples/desktop/assembled

input_stream: "input_video"
output_stream: "output_video"

# Throttles the images flowing downstream for flow control. It passes through
# the very first incoming image unaltered, and waits for
# TfLiteTensorsToDetectionsCalculator downstream in the graph to finish
# generating the corresponding detections before it passes through another
# image. All images that come in while waiting are dropped, limiting the number
# of in-flight images between this calculator and
# TfLiteTensorsToDetectionsCalculator to 1. This prevents the nodes in between
# from queuing up incoming images and data excessively, which leads to increased
# latency and memory usage, unwanted in real-time mobile applications. It also
# eliminates unnecessarily computation, e.g., a transformed image produced by
# ImageTransformationCalculator may get dropped downstream if the subsequent
# TfLiteConverterCalculator or TfLiteInferenceCalculator is still busy
# processing previous inputs.
node {
  calculator: "FlowLimiterCalculator"
  input_stream: "input_video"
  input_stream: "FINISHED:head_detections"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video__1"
}


## head detection

node {
  calculator: "HeadDetectionSubgraph"
  input_stream: "IMAGE:throttled_input_video__1"
  output_stream: "DETECTIONS:head_detections"
}

node {
  calculator: "DetectionsToRenderDataCalculator"
  input_stream: "DETECTIONS:head_detections"
  output_stream: "RENDER_DATA:head_detections_render_data"
  node_options: {
    [type.googleapis.com/mediapipe.DetectionsToRenderDataCalculatorOptions] {
      thickness: 1
      color { r: 255 g: 0 b: 0 }
    }
  }
}


## object detection

node {
  calculator: "FlowLimiterCalculator"
  input_stream: "throttled_input_video__1"
  input_stream: "FINISHED:object_detections"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video__2"
}

node {
  calculator: "ObjectDetectionSubgraph"
  input_stream: "IMAGE:throttled_input_video__2"
  output_stream: "DETECTIONS:object_detections"
}

node {
  calculator: "DetectionsToRenderDataCalculator"
  input_stream: "DETECTIONS:object_detections"
  output_stream: "RENDER_DATA:object_detections_render_data"
  node_options: {
    [type.googleapis.com/mediapipe.DetectionsToRenderDataCalculatorOptions] {
      thickness: 1
      color { r: 0 g: 0 b: 255 }
    }
  }
}


## hand detection

node {
  calculator: "FlowLimiterCalculator"
  input_stream: "throttled_input_video__1"
  input_stream: "FINISHED:hand_rect"
  input_stream_info: {
    tag_index: "FINISHED"
    back_edge: true
  }
  output_stream: "throttled_input_video__hand"
}

node {
  calculator: "HandDetectionSubgraph"
  input_stream: "IMAGE:throttled_input_video__hand"
  output_stream: "NORM_RECT:hand_rect"
  output_stream: "DETECTIONS:palm_detections"
  output_stream: "LANDMARKS:hand_landmarks"
}

node {
  calculator: "RectToRenderDataCalculator"
  input_stream: "NORM_RECT:hand_rect"
  output_stream: "RENDER_DATA:hand_rect_render_data"
  node_options: {
    [type.googleapis.com/mediapipe.RectToRenderDataCalculatorOptions] {
      thickness: 2
      filled: false
      color { r: 255 g: 0 b: 0 }
    }
  }
}
node {
  calculator: "DetectionsToRenderDataCalculator"
  input_stream: "DETECTIONS:palm_detections"
  output_stream: "RENDER_DATA:palm_detections_render_data"
  node_options: {
    [type.googleapis.com/mediapipe.DetectionsToRenderDataCalculatorOptions] {
      thickness: 2
      color { r: 0 g: 255 b: 0 }
    }
  }
}
node {
  calculator: "LandmarksToRenderDataCalculator"
  input_stream: "NORM_LANDMARKS:hand_landmarks"
  output_stream: "RENDER_DATA:hand_landmarks_render_data"
  node_options: {
    [type.googleapis.com/mediapipe.LandmarksToRenderDataCalculatorOptions] {
      thickness: 2
      landmark_color { r: 255 g: 0 b: 0 }
      connection_color { r: 0 g: 255 b: 0 }
      landmark_connections: 0
      landmark_connections: 1
      landmark_connections: 1
      landmark_connections: 2
      landmark_connections: 2
      landmark_connections: 3
      landmark_connections: 3
      landmark_connections: 4
      landmark_connections: 0
      landmark_connections: 5
      landmark_connections: 5
      landmark_connections: 6
      landmark_connections: 6
      landmark_connections: 7
      landmark_connections: 7
      landmark_connections: 8
      landmark_connections: 5
      landmark_connections: 9
      landmark_connections: 9
      landmark_connections: 10
      landmark_connections: 10
      landmark_connections: 11
      landmark_connections: 11
      landmark_connections: 12
      landmark_connections: 9
      landmark_connections: 13
      landmark_connections: 13
      landmark_connections: 14
      landmark_connections: 14
      landmark_connections: 15
      landmark_connections: 15
      landmark_connections: 16
      landmark_connections: 13
      landmark_connections: 17
      landmark_connections: 0
      landmark_connections: 17
      landmark_connections: 17
      landmark_connections: 18
      landmark_connections: 18
      landmark_connections: 19
      landmark_connections: 19
      landmark_connections: 20
    }
  }
}


## rendering

node {
  calculator: "AnnotationOverlayCalculator"
  input_stream: "INPUT_FRAME_GPU:input_video"

  input_stream: "head_detections_render_data"

  input_stream: "object_detections_render_data"

  input_stream: "hand_rect_render_data"
  input_stream: "palm_detections_render_data"
  input_stream: "hand_landmarks_render_data"

  output_stream: "OUTPUT_FRAME_GPU:output_video"
}
